package imagej.envisaje.diagnostics.sfsviewer;

import java.awt.BorderLayout;
import java.io.Serializable;
import org.openide.ErrorManager;
import org.openide.explorer.ExplorerManager;
import org.openide.explorer.view.BeanTreeView;
import org.openide.filesystems.FileObject;
import org.openide.filesystems.FileSystem;
import org.openide.filesystems.Repository;
import org.openide.loaders.DataObject;
import org.openide.loaders.DataObjectNotFoundException;
import org.openide.nodes.AbstractNode;
import org.openide.nodes.Children;
import org.openide.nodes.Node;
import org.openide.util.NbBundle;
import org.openide.windows.TopComponent;
import org.openide.windows.WindowManager;

/**
 * Top component which displays something.
 */
public final class SFSTopComponent extends TopComponent implements ExplorerManager.Provider {
    private static SFSTopComponent instance;
    private static final String PREFERRED_ID = "SFSTopComponent";
    private final ExplorerManager mgr = new ExplorerManager();
    private SFSTopComponent() {
        initComponents();
        setName(NbBundle.getMessage(SFSTopComponent.class, "CTL_SFSTopComponent"));
        setToolTipText(NbBundle.getMessage(SFSTopComponent.class, "HINT_SFSTopComponent"));
        BeanTreeView view = new BeanTreeView();
        add (view, BorderLayout.CENTER);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc=" Generated Code ">//GEN-BEGIN:initComponents
    private void initComponents() {

        setLayout(new java.awt.BorderLayout());

    }// </editor-fold>//GEN-END:initComponents
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
    
    /**
     * Gets default instance. Do not use directly: reserved for *.settings files only,
     * i.e. deserialization routines; otherwise you could get a non-deserialized instance.
     * To obtain the singleton instance, use {@link findInstance}.
     */
    public static synchronized SFSTopComponent getDefault() {
        if (instance == null) {
            instance = new SFSTopComponent();
        }
        return instance;
    }
    
    /**
     * Obtain the SFSTopComponent instance. Never call {@link #getDefault} directly!
     */
    public static synchronized SFSTopComponent findInstance() {
        TopComponent win = WindowManager.getDefault().findTopComponent(PREFERRED_ID);
        if (win == null) {
            ErrorManager.getDefault().log(ErrorManager.WARNING,
					"Cannot find SFS component. It will not be located properly in the window system.");
            return getDefault();
        }
        if (win instanceof SFSTopComponent) {
            return (SFSTopComponent)win;
        }
        ErrorManager.getDefault().log(ErrorManager.WARNING, "There seem " +
                "to be multiple components with the '" + PREFERRED_ID + 
                "' ID. That is a potential source of errors and unexpected " +
                "behavior.");
        return getDefault();
    }
    
    public int getPersistenceType() {
        return TopComponent.PERSISTENCE_ALWAYS;
    }
    
    public void componentOpened() {
        FileSystem sfs = Repository.getDefault().getDefaultFileSystem();
        FileObject root = sfs.getRoot();
        DataObject dataObject;
        try {
            dataObject = DataObject.find(root);
            Node rootNode = dataObject.getNodeDelegate();
            mgr.setRootContext(rootNode);
        } catch (DataObjectNotFoundException ex) {
            ErrorManager.getDefault().notify(ex);
        }
    }
    
    public void componentClosed() {
        //No reason to let the UI hold onto all the objects
        //its showing if nobody is looking at them
        mgr.setRootContext (new AbstractNode(Children.LEAF));
    }
    
    /** replaces this in object stream */
    public Object writeReplace() {
        return new ResolvableHelper();
    }
    
    protected String preferredID() {
        return PREFERRED_ID;
    }

    public ExplorerManager getExplorerManager() {
        return mgr;
    }
    
    final static class ResolvableHelper implements Serializable {
        private static final long serialVersionUID = 1L;
        public Object readResolve() {
            return SFSTopComponent.getDefault();
        }
    }
    
}
